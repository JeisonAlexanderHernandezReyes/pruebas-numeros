# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1apjiCNu3YNBICrwXHvv03XDlJzHn_KIi
"""

# Importar las bibliotecas necesarias
from ipywidgets import widgets, interact, interactive, Textarea, Button, Output
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats

# Prueba de media
# Comprueba si la media de los datos está cerca de 0.5
def media_test(data):
    media = np.mean(data)
    return abs(media - 0.5) < 0.1

# Prueba de varianza
# Comprueba si la varianza de los datos está entre 0.21 y 0.29
def varianza_test(data):
    varianza = np.var(data)
    return 0.21 < varianza < 0.29

# Prueba KS (Kolmogorov-Smirnov)
# Comprueba si los datos siguen una distribución uniforme
def ks_test(data):
    D, p_value = stats.kstest(data, 'uniform')
    return p_value > 0.05

# Prueba Chi-cuadrado
# Comprueba si los datos se distribuyen uniformemente entre los 10 intervalos
def chi2_test(data, bins=10):
    observed_freq, _, _ = plt.hist(data, bins=bins)
    plt.clf()  # Limpiar el gráfico
    expected_freq = [len(data) / bins] * bins
    chi2, p_value = stats.chisquare(observed_freq, expected_freq)
    return p_value > 0.05

# Prueba de Póker
# Comprueba si hay suficientes números con dígitos repetidos
def poker_test(data):
    count_repeated = 0
    for num in data:
        str_num = str(num)[2:6]  # Tomamos 4 decimales
        if len(set(str_num)) < len(str_num):
            count_repeated += 1
    ratio = count_repeated / len(data)
    return 0.1 < ratio < 0.9  # Este es un umbral de ejemplo, podría ajustarse

# Función principal para realizar la prueba y generar el gráfico
def test_numbers(test_name, text_area_content):
    data = [float(x) for x in text_area_content.split(',') if x]
    if not data:
        print("Por favor, ingresa números separados por comas.")
        return

    if test_name == 'Media':
        result = media_test(data)
    elif test_name == 'Varianza':
        result = varianza_test(data)
    elif test_name == 'KS':
        result = ks_test(data)
    elif test_name == 'Chi2':
        result = chi2_test(data)
    elif test_name == 'Póker':
        result = poker_test(data)

    plt.hist(data, bins=10, density=True, alpha=0.75, edgecolor="black")
    plt.title(f"Distribución de números generados ({'Pasa' if result else 'No pasa'})")
    plt.xlabel("Número")
    plt.ylabel("Frecuencia")
    plt.show()

# Widgets para la interfaz de usuario
test_name_widget = widgets.Dropdown(
    options=['Media', 'Varianza', 'KS', 'Chi2', 'Póker'],
    description='Prueba:'
)

text_area_widget = Textarea(
    value='',
    placeholder='Ingresa números separados por comas',
    description='Números:',
    disabled=False
)

button_widget = Button(description="Realizar prueba")
out = Output()

# Acción al hacer clic en el botón "Realizar prueba"
def on_button_clicked(_):
    with out:
        out.clear_output()
        test_numbers(test_name_widget.value, text_area_widget.value)

button_widget.on_click(on_button_clicked)

# Generar la interfaz de usuario
interact(test_numbers, test_name=test_name_widget, text_area_content=widgets.fixed(''))
display(text_area_widget)
display(button_widget)
display(out)